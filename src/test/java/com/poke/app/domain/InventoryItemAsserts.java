package com.poke.app.domain;

import static com.poke.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InventoryItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryItemAllPropertiesEquals(InventoryItem expected, InventoryItem actual) {
        assertInventoryItemAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryItemAllUpdatablePropertiesEquals(InventoryItem expected, InventoryItem actual) {
        assertInventoryItemUpdatableFieldsEquals(expected, actual);
        assertInventoryItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryItemAutoGeneratedPropertiesEquals(InventoryItem expected, InventoryItem actual) {
        assertThat(actual)
            .as("Verify InventoryItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryItemUpdatableFieldsEquals(InventoryItem expected, InventoryItem actual) {
        assertThat(actual)
            .as("Verify InventoryItem relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getCondition()).as("check condition").isEqualTo(expected.getCondition()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()))
            .satisfies(a -> assertThat(a.getGraded()).as("check graded").isEqualTo(expected.getGraded()))
            .satisfies(a -> assertThat(a.getGrade()).as("check grade").isEqualTo(expected.getGrade()))
            .satisfies(a ->
                assertThat(a.getPurchasePrice())
                    .as("check purchasePrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPurchasePrice())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryItemUpdatableRelationshipsEquals(InventoryItem expected, InventoryItem actual) {
        assertThat(actual)
            .as("Verify InventoryItem relationships")
            .satisfies(a -> assertThat(a.getCard()).as("check card").isEqualTo(expected.getCard()))
            .satisfies(a -> assertThat(a.getOwner()).as("check owner").isEqualTo(expected.getOwner()));
    }
}
