package com.poke.app.domain;

import static com.poke.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MarketPriceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketPriceAllPropertiesEquals(MarketPrice expected, MarketPrice actual) {
        assertMarketPriceAutoGeneratedPropertiesEquals(expected, actual);
        assertMarketPriceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketPriceAllUpdatablePropertiesEquals(MarketPrice expected, MarketPrice actual) {
        assertMarketPriceUpdatableFieldsEquals(expected, actual);
        assertMarketPriceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketPriceAutoGeneratedPropertiesEquals(MarketPrice expected, MarketPrice actual) {
        assertThat(actual)
            .as("Verify MarketPrice auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketPriceUpdatableFieldsEquals(MarketPrice expected, MarketPrice actual) {
        assertThat(actual)
            .as("Verify MarketPrice relevant properties")
            .satisfies(a -> assertThat(a.getSource()).as("check source").isEqualTo(expected.getSource()))
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a ->
                assertThat(a.getPriceLow()).as("check priceLow").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPriceLow())
            )
            .satisfies(a ->
                assertThat(a.getPriceMid()).as("check priceMid").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPriceMid())
            )
            .satisfies(a ->
                assertThat(a.getPriceHigh()).as("check priceHigh").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPriceHigh())
            )
            .satisfies(a -> assertThat(a.getLastUpdated()).as("check lastUpdated").isEqualTo(expected.getLastUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketPriceUpdatableRelationshipsEquals(MarketPrice expected, MarketPrice actual) {
        assertThat(actual)
            .as("Verify MarketPrice relationships")
            .satisfies(a -> assertThat(a.getCard()).as("check card").isEqualTo(expected.getCard()));
    }
}
